import { useState, useEffect } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  CircularProgress,
} from "@mui/material";
import { ArrowBack } from "@mui/icons-material";
import { useNavigate, Link } from "react-router-dom";
import axios from "axios";
import { styled } from "@mui/material/styles";

const IOSSwitch = styled("label")`
  position: relative;
  display: inline-block;
  width: 50px;
  height: 25px;

  input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: ${(props) => (props.checked ? "#47a54b" : "#dd0505")};
    border-radius: 34px;
    transition: background-color 0.4s;
  }

  .slider:before {
    content: "${(props) => (props.checked ? "✔️" : "❌")}";
    position: absolute;
    height: 22px;
    width: 22px;
    left: ${(props) => (props.checked ? "22px" : "1px")};
    bottom: 2px;
    background-color: #fff;
    color: ${(props) => (props.checked ? "#47a54b" : "#dd0505")};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    transition: 0.4s;
  }
`;

function AddPricesheet() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: "",
    city: "",
    effectiveDate: "",
    effectiveTime: "",
    remark: "",
  });

  const [supplierDetails, setSupplierDetails] = useState([]);
  const [loading, setLoading] = useState(true);

  console.log(supplierDetails);
  

  useEffect(() => {
    fetchCharges();
  }, []);

  const fetchCharges = async () => {
    try {
      const response = await axios.get(
        "http://localhost:3000/api/transportation-charges"
      );
      const details = response.data.map((item) => ({
        supplierName: item.supplierName,
        loadingPoint: item.loadingPoint,
        product: item.product,
        cv: item.cv,
        transportCharge: item.transportationCharge,
        gst: item.gst,
        basicPrice: "",
        productSequence: item.productSequence, // Include productSequence here
      }));
      setSupplierDetails(details);
    } catch (error) {
      console.error("Error fetching charges:", error);
    } finally {
      setLoading(false);
    }
  };
  

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleBasicPriceChange = (index, value) => {
    const updatedDetails = [...supplierDetails];
    updatedDetails[index].basicPrice = value;
    setSupplierDetails(updatedDetails);
  };

  const handleAvailableStatusChange = (index, checked) => {
  const updatedDetails = [...supplierDetails];
  updatedDetails[index].availableStatus = checked;  // Toggle availableStatus based on switch
  setSupplierDetails(updatedDetails); // Update the state with the new data
};




  // const handleSave = async () => {
  //   // Prepare data to save, excluding suppliers without a basicPrice
  //   const dataToSave = {
  //     ...formData,
  //     data: supplierDetails
  //       .filter((supplier) => supplier.basicPrice) // Only include suppliers with basicPrice
  //       .map((supplier) => ({
  //         supplierName: supplier.supplierName,
  //         productName: supplier.product,
  //         productSequence: supplier.productSequence,
  //         loadingPoint: supplier.loadingPoint,
  //         basicPrice: supplier.basicPrice,
  //         cv: supplier.cv,
  //         transportCharge: supplier.transportCharge,
  //         gst: supplier.gst,
  //       })),
  //   };
  
  //   try {
  //     const response = await axios.post(
  //       "http://localhost:3000/api/price-sheets",
  //       dataToSave
  //     );
  //     alert("Pricesheet successfully saved!");
  //     console.log(response.data);
  //   } catch (error) {
  //     console.error("Error saving pricesheet:", error);
  //     alert("Failed to save pricesheet. Please try again.");
  //   }
  // };

  const handleSave = async () => {
    // Prepare data to save, including availableStatus for each supplier
    const dataToSave = {
      ...formData,
      data: supplierDetails
        .filter((supplier) => supplier.basicPrice) // Only include suppliers with basicPrice
        .map((supplier) => ({
          supplierName: supplier.supplierName,
          productName: supplier.product,
          productSequence: supplier.productSequence,
          loadingPoint: supplier.loadingPoint,
          basicPrice: supplier.basicPrice,
          cv: supplier.cv,
          transportCharge: supplier.transportCharge,
          gst: supplier.gst,
          availableStatus: supplier.availableStatus, // Include availableStatus
        })),
    };
  
    try {
      const response = await axios.post(
        "http://localhost:3000/api/price-sheets",
        dataToSave
      );
      alert("Pricesheet successfully saved!");
      console.log(response.data);

      navigate('/pricesheet'); // Replace '/dashboard' with the path you want to navigate to

    } catch (error) {
      console.error("Error saving pricesheet:", error);
      alert("Failed to save pricesheet. Please try again.");
    }
  };
  

 
  
  


  return (
    <Box p={3}>
      <Box sx={{ display: "flex" }}>
        <Button
          variant="text"
          color="primary"
          onClick={() => navigate(-1)}
          sx={{ mb: 2 }}
        >
          <ArrowBack />
        </Button>
        <Typography variant="h5" sx={{ fontWeight: "bold", mb: 1 }}>
          Add Pricesheet
        </Typography>
      </Box>
      <Box>
        <Typography
          variant="subtitle1"
          sx={{ color: "grey.600", mb: 5, marginLeft: "60px" }}
        >
          <Link to="/" style={{ textDecoration: "none" }}>
            Dashboard
          </Link>{" "}
          / Add Pricesheet
        </Typography>
      </Box>

      {/* General Inputs */}
      <Box
        sx={{
          background: "#fff",
          borderRadius: "20px",
          padding: "30px",
          marginTop: "30px",
        }}
      >
        <Typography
          variant="body2"
          color="text.secondary"
          sx={{
            ml: 2,
            color: "error.main",
            mb: 4,
          }}
        >
          📌 Price added for each company and selected products is{" "}
          <b>Per Ton</b>.
        </Typography>
        <Grid container spacing={3}>
          {["name", "city"].map((field) => (
            <Grid item xs={12} sm={3} key={field}>
              <TextField
                label={field.charAt(0).toUpperCase() + field.slice(1)}
                variant="outlined"
                fullWidth
                name={field}
                value={formData[field]}
                onChange={handleInputChange}
              />
            </Grid>
          ))}
          <Grid item xs={12} sm={3}>
            <TextField
              type="date"
              label="Effective Date"
              InputLabelProps={{ shrink: true }}
              fullWidth
              name="effectiveDate"
              value={formData.effectiveDate}
              onChange={handleInputChange}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              type="time"
              label="Effective Time"
              InputLabelProps={{ shrink: true }}
              fullWidth
              name="effectiveTime"
              value={formData.effectiveTime}
              onChange={handleInputChange}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Remark"
              variant="outlined"
              fullWidth
              name="remark"
              value={formData.remark}
              onChange={handleInputChange}
            />
          </Grid>
        </Grid>
      </Box>

      
      <Box
        sx={{
          background: "#fff",
          borderRadius: "20px",
          marginTop: "30px",
        }}
      >
        {loading ? (
          <Box textAlign="center" mt={5}>
            <CircularProgress />
          </Box>
        ) : (
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow sx={{ backgroundColor: "primary.dark" }}>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Supplier Name
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Product
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Product Sequence
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Loading Point
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Basic Price
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Transport Charge
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    CV
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    GST
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "#fff", fontWeight: "bold" }}
                  >
                    Status
                  </TableCell>
                </TableRow>
              </TableHead>
              {/* <TableBody>
                {supplierDetails.map((supplier, index) => (
                  <TableRow
                    key={index}
                    sx={{
                      "&:hover": {
                        backgroundColor: "#f9fafc",
                      },
                      borderBottom: "1px solid #e0e0e0",
                    }}
                  >
                    <TableCell align="center">
                      {supplier.supplierName}
                    </TableCell>
                    <TableCell align="center">{supplier.product}</TableCell>
                    <TableCell align="center">{supplier.productSequence}</TableCell>
                    <TableCell align="center">
                      {supplier.loadingPoint}
                    </TableCell>
                    <TableCell align="center">
                      <TextField
                        type="text"
                        value={supplier.basicPrice}
                        onChange={(e) =>
                          handleBasicPriceChange(index, e.target.value)
                        }
                        variant="outlined"
                        size="small"
                        fullWidth
                      />
                    </TableCell>
                    <TableCell align="center">
                      {supplier.transportCharge}
                    </TableCell>
                    <TableCell align="center">{supplier.cv}</TableCell>
                    <TableCell align="center">{supplier.gst}</TableCell>

                    <TableCell
                      sx={{
                        textAlign: "center",
                      }}
                    >

                      <IOSSwitch
                      >
                        <input
                          type="checkbox"
                          style={{ opacity: 0, width: 0, height: 0 }} 
                        />
                        <span className="slider"></span>
                      </IOSSwitch>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody> */}

<TableBody>
  {supplierDetails.map((supplier, index) => (
    <TableRow
      key={index}
      sx={{
        "&:hover": {
          backgroundColor: "#f9fafc",
        },
        borderBottom: "1px solid #e0e0e0",
      }}
    >
      <TableCell align="center">{supplier.supplierName}</TableCell>
      <TableCell align="center">{supplier.product}</TableCell>
      <TableCell align="center">{supplier.productSequence}</TableCell>
      <TableCell align="center">{supplier.loadingPoint}</TableCell>
      <TableCell align="center">
        <TextField
          type="text"
          value={supplier.basicPrice}
          onChange={(e) => handleBasicPriceChange(index, e.target.value)}
          variant="outlined"
          size="small"
          fullWidth
        />
      </TableCell>
      <TableCell align="center">{supplier.transportCharge}</TableCell>
      <TableCell align="center">{supplier.cv}</TableCell>
      <TableCell align="center">{supplier.gst}</TableCell>

      <TableCell sx={{ textAlign: "center" }}>
        <IOSSwitch
          checked={supplier.availableStatus}  
          onChange={(e) => handleAvailableStatusChange(index, e.target.checked)}  
        >
          <input
            type="checkbox"
            style={{ opacity: 0, width: 0, height: 0 }}
          />
          <span className="slider"></span>
        </IOSSwitch>
      </TableCell>
    </TableRow>
  ))}
</TableBody>

            </Table>
          </TableContainer>
        )}
      </Box>



      <Box textAlign="center" mt={5}>
        <Button
          variant="contained"
          color="primary"
          onClick={handleSave}
          sx={{ px: 4, py: 1.5, fontWeight: "bold" }}
        >
          Save
        </Button>
        <Button
          variant="outlined"
          color="error"
          sx={{ ml: 2, px: 4, py: 1.5, fontWeight: "bold" }}
          onClick={() => navigate(-1)}
        >
          Cancel
        </Button>
      </Box>
    </Box>
  );
}

export default AddPricesheet;


--------------------------------------------------------------



import { useState, useEffect } from "react";
import {
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  CircularProgress,
} from "@mui/material";
import { ArrowBack } from "@mui/icons-material";
import { useNavigate, Link } from "react-router-dom";
import axios from "axios";
import { styled } from "@mui/material/styles";

const IOSSwitch = styled("label")`
  position: relative;
  display: inline-block;
  width: 50px;
  height: 25px;

  input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: ${(props) => (props.checked ? "#47a54b" : "#dd0505")};
    border-radius: 34px;
    transition: background-color 0.4s;
  }

  .slider:before {
    content: "${(props) => (props.checked ? "✔️" : "❌")}";
    position: absolute;
    height: 22px;
    width: 22px;
    left: ${(props) => (props.checked ? "22px" : "1px")};
    bottom: 2px;
    background-color: #fff;
    color: ${(props) => (props.checked ? "#47a54b" : "#dd0505")};
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    transition: 0.4s;
  }
`;

function AddPricesheet() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: "",
    city: "",
    effectiveDate: "",
    effectiveTime: "",
    remark: "",
  });

  const [supplierDetails, setSupplierDetails] = useState([]);
  const [loading, setLoading] = useState(true);

  console.log(supplierDetails);

  useEffect(() => {
    fetchCharges();
  }, []);

  const fetchCharges = async () => {
    try {
      const response = await axios.get(
        "http://localhost:3000/api/transportation-charges"
      );
      const details = response.data.map((item) => ({
        supplierName: item.supplierName,
        loadingPoint: item.loadingPoint,
        product: item.product,
        cv: item.cv,
        transportCharge: item.transportationCharge,
        gst: item.gst,
        basicPrice: "",
        productSequence: item.productSequence, // Include productSequence here
      }));
      setSupplierDetails(details);
    } catch (error) {
      console.error("Error fetching charges:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // const handleBasicPriceChange = (index, value) => {
  //   const updatedDetails = [...supplierDetails];
  //   updatedDetails[index].basicPrice = value;
  //   setSupplierDetails(updatedDetails);
  // };

  const handleBasicPriceChange = (supplierName, product, loadingPoint, value) => {
    setSupplierDetails((prevDetails) =>
      prevDetails.map((supplier) => {
        if (supplier.supplierName === supplierName) {
          return {
            ...supplier,
            products: supplier.products.map((prod) => {
              if (prod.name === product && prod.loadingPoint === loadingPoint) {
                return { ...prod, basicPrice: value };
              }
              return prod;
            }),
          };
        }
        return supplier;
      })
    );
  };
  

  const handleAvailableStatusChange = (index, checked) => {
    const updatedDetails = [...supplierDetails];
    updatedDetails[index].availableStatus = checked; // Toggle availableStatus based on switch
    setSupplierDetails(updatedDetails); // Update the state with the new data
  };

  const handleSave = async () => {
    // Prepare data to save, including availableStatus for each supplier
    const dataToSave = {
      ...formData,
      data: supplierDetails
        .filter((supplier) => supplier.basicPrice) // Only include suppliers with basicPrice
        .map((supplier) => ({
          supplierName: supplier.supplierName,
          productName: supplier.product,
          productSequence: supplier.productSequence,
          loadingPoint: supplier.loadingPoint,
          basicPrice: supplier.basicPrice,
          cv: supplier.cv,
          transportCharge: supplier.transportCharge,
          gst: supplier.gst,
          availableStatus: supplier.availableStatus, // Include availableStatus
        })),
    };

    try {
      const response = await axios.post(
        "http://localhost:3000/api/price-sheets",
        dataToSave
      );
      alert("Pricesheet successfully saved!");
      console.log(response.data);

      navigate("/pricesheet"); // Replace '/dashboard' with the path you want to navigate to
    } catch (error) {
      console.error("Error saving pricesheet:", error);
      alert("Failed to save pricesheet. Please try again.");
    }
  };

  return (
    <Box p={3}>
      <Box sx={{ display: "flex" }}>
        <Button
          variant="text"
          color="primary"
          onClick={() => navigate(-1)}
          sx={{ mb: 2 }}
        >
          <ArrowBack />
        </Button>
        <Typography variant="h5" sx={{ fontWeight: "bold", mb: 1 }}>
          Add Pricesheet
        </Typography>
      </Box>
      <Box>
        <Typography
          variant="subtitle1"
          sx={{ color: "grey.600", mb: 5, marginLeft: "60px" }}
        >
          <Link to="/" style={{ textDecoration: "none" }}>
            Dashboard
          </Link>{" "}
          / Add Pricesheet
        </Typography>
      </Box>

      {/* General Inputs */}
      <Box
        sx={{
          background: "#fff",
          borderRadius: "20px",
          padding: "30px",
          marginTop: "30px",
        }}
      >
        <Typography
          variant="body2"
          color="text.secondary"
          sx={{
            ml: 2,
            color: "error.main",
            mb: 4,
          }}
        >
          📌 Price added for each company and selected products is{" "}
          <b>Per Ton</b>.
        </Typography>
        <Grid container spacing={3}>
          {["name", "city"].map((field) => (
            <Grid item xs={12} sm={3} key={field}>
              <TextField
                label={field.charAt(0).toUpperCase() + field.slice(1)}
                variant="outlined"
                fullWidth
                name={field}
                value={formData[field]}
                onChange={handleInputChange}
              />
            </Grid>
          ))}
          <Grid item xs={12} sm={3}>
            <TextField
              type="date"
              label="Effective Date"
              InputLabelProps={{ shrink: true }}
              fullWidth
              name="effectiveDate"
              value={formData.effectiveDate}
              onChange={handleInputChange}
            />
          </Grid>
          <Grid item xs={12} sm={3}>
            <TextField
              type="time"
              label="Effective Time"
              InputLabelProps={{ shrink: true }}
              fullWidth
              name="effectiveTime"
              value={formData.effectiveTime}
              onChange={handleInputChange}
            />
          </Grid>
          <Grid item xs={12}>
            <TextField
              label="Remark"
              variant="outlined"
              fullWidth
              name="remark"
              value={formData.remark}
              onChange={handleInputChange}
            />
          </Grid>
        </Grid>
      </Box>

      <Box
        sx={{
          background: "#fff",
          borderRadius: "20px",
          marginTop: "30px",
          padding: "20px",
        }}
      >
        {loading ? (
          <Box textAlign="center" mt={5}>
            <CircularProgress />
          </Box>
        ) : (
          <Box sx={{ display: "flex", flexWrap: "wrap", gap:3}}>
            {Object.entries(
              supplierDetails.reduce((acc, supplier) => {
                if (!acc[supplier.supplierName]) {
                  acc[supplier.supplierName] = [];
                }
                acc[supplier.supplierName].push(supplier);
                return acc;
              }, {})
            ).map(([supplierName, suppliers]) => (
              <Box
                key={supplierName}
                sx={{
                  // width: "100%",
                  // maxWidth:300,
                  borderRadius: "15px",
                  boxShadow: "0 4px 10px rgba(0, 0, 0, 0.1)",
                  overflow: "hidden",
                }}
              >
                
                {/* Card Header */}
                <Box
                  sx={{
                    backgroundColor: "primary.dark",
                    color: "#fff",
                    textAlign: "center",
                    py: 2,
                  }}
                >
                  <Typography variant="h6" sx={{ fontWeight: "bold" }}>
                    {supplierName}
                  </Typography>
                </Box>

                {/* Card Body */}
                <Box sx={{ padding: 2 }}>
                  {suppliers.map((supplier, index) => (
                    <Box
                      key={index}
                      sx={{
                        pb: 2,
                        borderBottom: "1px solid #e0e0e0",
                        mb: 2,
                      }}
                    >
                      <Typography
                        variant="h6"
                        sx={{
                          color: "text.secondary",
                          fontWeight: "500",
                          mb: 2,
                        }}
                      >
                        {supplier.product}
                      </Typography>

                      <Box
                        sx={{
                          display: "flex",
                          alignItems: "center",
                          justifyContent: "space-between",
                          gap:3
                        }}
                      >
                        <Box>
                          <Typography
                            variant="body2"
                            sx={{ color: "text.secondary" }}
                          >
                            Loading Point
                          </Typography>
                          <Typography>{supplier.loadingPoint}</Typography>
                        </Box>

                        <Box>
                          <Typography
                            variant="body2"
                            sx={{ color: "text.secondary" }}
                          >
                            Basic Price
                          </Typography>
                          <TextField
                      type="text"
                      value={supplier.basicPrice}
                      onChange={(e) =>
                        handleBasicPriceChange(
                          supplierDetails.findIndex(
                            (item) =>
                              item.supplierName === supplierName &&
                              item.loadingPoint === supplier.loadingPoint
                          ),
                          e.target.value
                        )
                      }
                      variant="outlined"
                      size="small"
                      sx={{
                        width: "150px", // Set a fixed width (adjust as needed)
                        "& .MuiOutlinedInput-root": {
                          borderRadius: 1, // Optional: rounded corners
                        },
                      }}
                    />
                        </Box>

                        <Box>
                          <IOSSwitch
                            checked={supplier.availableStatus}
                            onChange={(e) =>
                              handleAvailableStatusChange(
                                index,
                                e.target.checked
                              )
                            }
                          >
                            <input
                              type="checkbox"
                              style={{ opacity: 0, width: 0, height: 0 }}
                            />
                            <span className="slider"></span>
                          </IOSSwitch>
                        </Box>
                      </Box>
                      
                    </Box>
                  ))}
                </Box>

              </Box>
            ))}
          </Box>
        )}
      </Box>

      <Box textAlign="center" mt={5}>
        <Button
          variant="contained"
          color="primary"
          onClick={handleSave}
          sx={{ px: 4, py: 1.5, fontWeight: "bold" }}
        >
          Save
        </Button>
        <Button
          variant="outlined"
          color="error"
          sx={{ ml: 2, px: 4, py: 1.5, fontWeight: "bold" }}
          onClick={() => navigate(-1)}
        >
          Cancel
        </Button>
      </Box>
    </Box>
  );
}

export default AddPricesheet;

