model PriceSheet {
  id             Int              @id @default(autoincrement())
  name           String           // Price Sheet Name
  city           String           // City Name
  effectiveDate  DateTime         // Effective Date
  effectiveTime  String           // Effective Time (e.g., "HH:mm:ss")
  remark         String?          // Optional Remark
  activeStatus   Boolean          @default(true) // Default to true
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  data           PriceSheetData[]

  @@index([name, city]) // Index for quick search
}

model PriceSheetData {
  id               Int      @id @default(autoincrement())
  priceSheetId     Int
  supplierName     String   // Supplier Name
  productName      String   // Product Name
  loadingPoint     String   // Loading Point
  basicPrice       Decimal  @db.Decimal(10, 2) // Basic Price
  cv               Decimal  @db.Decimal(10, 2) // CV
  transportCharge  Decimal  @db.Decimal(10, 2) // Transport Charge
  basicLanded      Decimal  @db.Decimal(10, 2) // Basic Landed = Basic Price + Transport Charge
  gstPercentage    Decimal  @db.Decimal(5, 2)  // GST Percentage
  gst              Decimal  @db.Decimal(10, 2) // GST Value
  total            Decimal  @db.Decimal(10, 2) // Total = Basic Landed + GST
  availableStatus  Boolean  
  productSequence  Int      // Product Sequence
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  priceSheet       PriceSheet @relation(fields: [priceSheetId], references: [id], onDelete: Cascade)

  @@index([priceSheetId, supplierName, productName]) // Index for performance
}


async createPriceSheet(req, res) {
    const { name, city, effectiveDate, effectiveTime, remark, data } = req.body;
  
    try {
      const priceSheet = await prisma.priceSheet.create({
        data: {
          name,
          city,
          effectiveDate: new Date(effectiveDate),
          effectiveTime,
          remark,
          data: {
            create: data.map((item) => {
              const basicPrice = parseFloat(item.basicPrice);
              const transportCharge = parseFloat(item.transportCharge);
              const gstPercentage = parseFloat(item.gst);
  
              // Calculate GST as a percentage of the basicPrice
              const gstValue = (basicPrice * gstPercentage) / 100;
  
              return {
                supplierName: item.supplierName,
                productName: item.productName,
                loadingPoint: item.loadingPoint,
                basicPrice,
                cv: parseFloat(item.cv),
                transportCharge,
                basicLanded: basicPrice + transportCharge,
                gstPercentage, // Matches the schema's gstPercentage field
                gst: gstValue, // Matches the schema's gst field
                total: basicPrice + transportCharge + gstValue, // Matches the schema's total field
                productSequence: item.productSequence, // Include productSequence
                availableStatus: item.availableStatus !== undefined ? item.availableStatus : false, // Default to true if not provided
              };
            }),
          },
        },
      });
  
      res.status(201).json({ message: 'Price sheet created successfully.', priceSheet });
    } catch (error) {
      console.error('Error creating price sheet:', error);
      res.status(500).json({ message: 'Error creating price sheet.', error });
    }
  },